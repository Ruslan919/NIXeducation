# -*- coding: utf-8 -*-
"""BeginnerNix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1StIHNeYcE2p02Jud3veB_0RxrCgGFxZy
"""

https://pythontutor.com/
"""
Напишите template строки, который можно будет многократно переиспользовать,
вставляя в него имя и фамилию человека.
Используйте метод строки "format". 
"""
name= input("name:")
surname= input("surname:")
print('name:{0} and surname:{1}'.format(name, surname))

'''
Напишите функцию, которая будет преобразовывать цену к формату,
отображающему до двух знаков после точки, например:
22.32131 -> 22.32
58.60125 -> 58.6
34.0 -> 34
'''
def trans():
  try:
    namber =  float(input("float namber:"))
  except ValueError:
    return
  a = str("%.2f" % namber)
  return print('namber{} '.format(a[:-1]))

t = trans()

'''
Дан список из строк. 
Создайте однострочное решение (при помощи list comprehension), 
которое приведёт к верхнему регистру все строки, содержащие слово 'price')
'''
thislist = ["apple_price", "banana", "cherry_price", "apple", "cherry"]

list_2 = [print(item.upper()) for item in thislist if 'price' in item]

""" 
Напишите функцию, которая принимает список, и число. 
Функция должна разбить список на N кусков, 
переданных в функцию в качестве втрого аргумента. 
Выполнить проверки по здравому смыслу 
(например, нет смысла пытаться разбить список из 3 элементов на 4 элемента)
"""


def func_chunk(lst, n):
    if len(lst) % n != 0:
      raise Exception("Sorry, You are trying to split the list into more parts than is possible.")
    for x in range(0, len(lst), n):
        e_c = lst[x : n + x]
        yield e_c

print(list(func_chunk([9, 8, 7, 6, 5, 4, 3, 2, 1], 3)))
#print(list(func_chunk([9, 8, 7, 6, 5, 4, 3, 2, 1], 4)))

"""
Дана строка из имён, в формате "Денис, Олег, Вася, Петя,Дима,Женя". 
Разбейте строку так, чтобы получился список имён. 
Заметьте: после запятой не всегда есть пробел 
(он не должен входить в имена, которые попадут в список)
"""

name = "Денис, Олег, Вася, Петя,Дима,Женя"
disallowed_characters = " "

for character in disallowed_characters:
	name = name.replace(character, "")
lst_name= name.split(',')

print(lst_name)

"""
7. 	Дан список из строк. 
Используя join, соедините строки так, чтобы они были разделены через запятую. 
На выходе должна получиться строка в виде "my_string1,my_string2,my_string3" 	
"""
lst= ['my_string1', 'my_string2', 'my_string3']
print(",".join(lst))

"""
8. 	Есть список из случайных чисел и строк. 
Создайте цикл, итерирующийся до тех пор, пока не встретится число "777". 
Если в течении 100 попыток число не будет найдено — остановить цикл
и вызвать ошибку с соответсвующим сообщением.
"""
#import random
#lst = random.sample(range(1, 1000), 200)

#lst= ['my_string1', 'my_string2', 'my_string3', 1, 777, 'my_string1', 'my_string2', 'my_string3']
lst= ['my_string1', 'my_string2', 'my_string3', 1, 3, 'my_string1', 'my_string2', 'my_string3']

n =0
while not(lst[n] == 777 or n == 7):
  n=n+1
  if n == 6:
    #break
    raise Exception("Sorry, there are no 777 in the list")
print("We find:{0},{1}".format(lst[n], n))

"""
9. 	Создать функцию, которая принимает на вход два списка: 
первый — список, который нужно очистить от определённых значений, 
второй — список тех значений, от которых нужно очистить. 
Например, list1 = [1, 2, 3, 4, 5], list2 = [1, 3, 4], 
функция должна вернуть [2, 5]
"""

list1 = [1, 2, 3, 4, 5]
list2 = [1, 3, 4]

def affinage(a, b):
  for n in range(len(b)):
    a.remove(b[n])
  return a

c = affinage(list1, list2)
print(c)

